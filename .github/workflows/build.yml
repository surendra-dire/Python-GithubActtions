name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: Code Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        #pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Install distutils
      run: |
        sudo apt-get update
        sudo apt-get install python3-pip
        sudo python3 -m ensurepip --upgrade




      
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            
    - name: Set PYTHONPATH and run tests
      run: |
        export PYTHONPATH=$(pwd)  # Set PYTHONPATH to the current directory
        pytest  # Run your tests


# --------------------- Build ----------------------------------


    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:  
         JF_URL: ${{ vars.JF_URL }}
         JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
         
    - name: Set CLI Config
      run: jf pip-config --global=true --repo-resolve=demo-pypi
         
    - name: Install Deps
      run: jf pip install .
         
    - name: Package the project
      run: python setup.py sdist bdist_wheel
       
    - name: Publish
      run: jf rt upload dist/ demo-pypi/
       
    - name: Publish Build info With JFrog CLI
      run: |
        # Collect environment variables for the build
        jf rt build-collect-env
        # Collect VCS details from git and add them to the build
        jf rt build-add-git
        # Publish build info
        jf rt build-publish











        
        
    - name: Build Docker image
      run: |
        docker build -t my-python-app .
        docker images

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
  
    - name: Tag Docker image
      run: |
        docker tag my-python-app ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest
    
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest
    
    - name: Run Docker image (Optional)
      run: |
        docker run -d --name  my-python-app-container -p 5000:5000 my-python-app:latest
        docker ps
        #curl localhost:5000
